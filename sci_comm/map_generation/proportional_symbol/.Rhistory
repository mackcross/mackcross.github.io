title = "4th Year Graduate Rate") +
tm_bubbles(size = "binned_CountySpendingPerStudent",
col = "black",
alpha = .8,
scale = 1.75) +
tm_legend(outside = TRUE,
outside.position = "left",
bg.color = "transparent",
frame = FALSE)
})
output$map_grad5 <- renderTmap({
tm_shape(my_map) +
tm_fill("cleaned_rural_CountyGraduateRate5yr",
style = "quantile",
n = 5,
palette = c("#edf8fb", "#b3cde3", "#8c96c6", "#8856a7", "#810f7c"),
title = "5th Year Graduate Rate") +
tm_bubbles(size = "binned_CountySpendingPerStudent",
col = "black",
alpha = .8,
scale = 1.75) +
tm_legend(outside = TRUE,
outside.position = "left",
bg.color = "transparent",
frame = FALSE)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
ui <- fluidPage(
navbarPage(
"Maps",
tabPanel("% 4yr Grad",
leafletOutput("map_grad")),
tabPanel("% 5yr Grad",
leafletOutput("map_grad5"))
)
)
server <- function(input, output) {
output$map_grad <- renderLeaflet({
leaflet(my_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate4yr)(cleaned_rural_CountyGraduateRate4yr),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste("County: ", cleaned_rural_name),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
popup = ~paste("4th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate4yr)
) %>%
addLegend("bottomright",
pal = colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate4yr),
values = cleaned_rural_CountyGraduateRate4yr,
title = "4th Year Graduate Rate",
opacity = 1)
})
output$map_grad5 <- renderLeaflet({
leaflet(my_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate5yr)(cleaned_rural_CountyGraduateRate5yr),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste("County: ", cleaned_rural_name),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
popup = ~paste("5th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate5yr)
) %>%
addLegend("bottomright",
pal = colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate5yr),
values = cleaned_rural_CountyGraduateRate5yr,
title = "5th Year Graduate Rate",
opacity = 1)
})
observe({
proxy <- leafletProxy("map_grad")
proxy %>% addPopups(
data = my_map,
layerId = ~County,
lng = ~Longitude,
lat = ~Latitude,
popup = ~
library(shiny)
library(leaflet)
ui <- fluidPage(
navbarPage(
"Maps",
tabPanel("% 4yr Grad",
leafletOutput("map_grad")),
tabPanel("% 5yr Grad",
leafletOutput("map_grad5"))
)
)
server <- function(input, output) {
output$map_grad <- renderLeaflet({
leaflet(my_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate4yr)(cleaned_rural_CountyGraduateRate4yr),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste("County: ", cleaned_rural_name),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
popup = ~paste("4th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate4yr)
) %>%
addLegend("bottomright",
pal = colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate4yr),
values = cleaned_rural_CountyGraduateRate4yr,
title = "4th Year Graduate Rate",
opacity = 1)
})
output$map_grad5 <- renderLeaflet({
leaflet(my_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate5yr)(cleaned_rural_CountyGraduateRate5yr),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste("County: ", cleaned_rural_name),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
popup = ~paste("5th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate5yr)
) %>%
addLegend("bottomright",
pal = colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate5yr),
values = cleaned_rural_CountyGraduateRate5yr,
title = "5th Year Graduate Rate",
opacity = 1)
})
observe({
proxy <- leafletProxy("map_grad")
proxy %>% addPopups(
data = my_map,
layerId = ~County,
lng = ~Longitude,
lat = ~Latitude,
popup = ~
ui <- fluidPage(
navbarPage(
"Maps",
tabPanel("% 4yr Grad",
tmapOutput("map_grad")),
tabPanel("% 5yr Grad",
tmapOutput("map_grad5"))
)
)
server <- function(input, output) {
output$map_grad <- renderTmap({
tm_shape(my_map) +
tm_fill("cleaned_rural_CountyGraduateRate4yr",
style = "quantile",
n = 5,
palette = c("#edf8fb", "#b3cde3", "#8c96c6", "#8856a7", "#810f7c"),
title = "4th Year Graduate Rate") +
tm_bubbles(size = "binned_CountySpendingPerStudent",
col = "black",
alpha = .8,
scale = 1.75) +
tm_legend(outside = TRUE,
outside.position = "left",
bg.color = "transparent",
frame = FALSE)
})
output$map_grad5 <- renderTmap({
tm_shape(my_map) +
tm_fill("cleaned_rural_CountyGraduateRate5yr",
style = "quantile",
n = 5,
palette = c("#edf8fb", "#b3cde3", "#8c96c6", "#8856a7", "#810f7c"),
title = "5th Year Graduate Rate") +
tm_bubbles(size = "binned_CountySpendingPerStudent",
col = "black",
alpha = .8,
scale = 1.75) +
tm_legend(outside = TRUE,
outside.position = "left",
bg.color = "transparent",
frame = FALSE)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
ui <- fluidPage(
navbarPage(
"Maps",
tabPanel("% 4yr Grad",
leafletOutput("map_grad")),
tabPanel("% 5yr Grad",
leafletOutput("map_grad5"))
)
)
server <- function(input, output) {
output$map_grad <- renderLeaflet({
leaflet(data = my_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate4yr)(cleaned_rural_CountyGraduateRate4yr),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste("County: ", cleaned_rural_name),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
popup = ~paste("4th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate4yr)
) %>%
addLegend("bottomright",
pal = colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate4yr),
values = cleaned_rural_CountyGraduateRate4yr,
title = "4th Year Graduate Rate",
opacity = 1)
})
output$map_grad5 <- renderLeaflet({
leaflet(data = my_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate5yr)(cleaned_rural_CountyGraduateRate5yr),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste("County: ", cleaned_rural_name),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
popup = ~paste("5th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate5yr)
) %>%
addLegend("bottomright",
pal = colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate5yr),
values = cleaned_rural_CountyGraduateRate5yr,
title = "5th Year Graduate Rate",
opacity = 1)
})
observe({
proxy <- leafletProxy("map_grad")
proxy %>% addPopups(
data = my_map,
layerId = ~County,
lng = ~Longitude,
lat = ~Latitude,
popup = ~paste("County: ", cleaned_rural_name, "<br>",
"4th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate4yr, "%")
)
})
}
sh
library(shiny)
library(leaflet)
ui <- fluidPage(
navbarPage(
"Maps",
tabPanel("% 4yr Grad",
leafletOutput("map_grad")),
tabPanel("% 5yr Grad",
leafletOutput("map_grad5"))
)
)
server <- function(input, output) {
output$map_grad <- renderLeaflet({
leaflet(my_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate4yr)(cleaned_rural_CountyGraduateRate4yr),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste("County: ", cleaned_rural_name),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
popup = ~paste("4th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate4yr)
) %>%
addLegend("bottomright",
pal = colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate4yr),
values = cleaned_rural_CountyGraduateRate4yr,
title = "4th Year Graduate Rate",
opacity = 1)
})
output$map_grad5 <- renderLeaflet({
leaflet(my_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate5yr)(cleaned_rural_CountyGraduateRate5yr),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste("County: ", cleaned_rural_name),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
popup = ~paste("5th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate5yr)
) %>%
addLegend("bottomright",
pal = colorQuantile("YlOrRd", cleaned_rural_CountyGraduateRate5yr),
values = cleaned_rural_CountyGraduateRate5yr,
title = "5th Year Graduate Rate",
opacity = 1)
})
observe({
proxy <- leafletProxy("map_grad")
proxy %>% addPopups(
data = my_map,
layerId = ~County,
lng = ~Longitude,
lat = ~Latitude,
popup = ~paste("County: ", cleaned_rural_name, "<br>",
"4th Year Graduate Rate: ", cleaned_rural_CountyGraduateRate4yr)
)
})
observe({
proxy
?tm_hover
?tm_tooltip
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
rm(list=ls())
library(readr)
library(choroplethr)
library(choroplethrMaps)
library(dplyr)
library(ggplot2)
library(plotly)
library(tmap)
library(sf)
library(tmaptools)
library(gganimate)
library(cowplot)
library(gridExtra)
library(shiny)
# Chunk 3
# Importing in geojoson file
my_map <- st_read("~/Documents/mackcross/sci_comm/shapefiles/rural_variables.geojson", quiet=TRUE)
# lab:
# personal: ~/Documents/mackcross/sci_comm/shapefiles/rural_variables.geojson
my_data <- data.frame(my_map)
# Convert size variable to numeric and remove missing values
my_map$cleaned_rural_density <- as.numeric(my_map$cleaned_rural_density)
my_map$cleaned_rural_mean_sci <- as.numeric(my_map$cleaned_rural_mean_sci)
my_map$cleaned_rural_mean_math <- as.numeric(my_map$cleaned_rural_mean_math)
my_map$cleaned_rural_CountyGraduateRate4yr <- as.numeric(my_map$cleaned_rural_CountyGraduateRate4yr)
my_map$cleaned_rural_CountyGraduateRate5yr <- as.numeric(my_map$cleaned_rural_CountyGraduateRate5yr)
my_map$cleaned_rural_CountySpendingPerStudent <- as.numeric(my_map$cleaned_rural_CountySpendingPerStudent)
my_map$cleaned_rural_Graduate.or.professional.degree.. <- as.numeric(my_map$cleaned_rural_Graduate.or.professional.degree..)
my_map$cleaned_rural_Bachelor.s.degree.. <- as.numeric(my_map$cleaned_rural_Bachelor.s.degree..)
my_map$cleaned_rural_High.school.graduate..includes.equivalency... <- as.numeric(my_map$cleaned_rural_High.school.graduate..includes.equivalency...)
# Determine quantiles
quantile(my_map$cleaned_rural_CountySpendingPerStudent, na.rm = TRUE)
# Set quantiles
my_map$cleaned_rural_CountySpendingPerStudent <- as.numeric(my_map$cleaned_rural_CountySpendingPerStudent)
my_map$binned_CountySpendingPerStudent <- cut(my_map$cleaned_rural_CountySpendingPerStudent,
breaks = c(12655.18, 15584.22, 16883.50, 18780.58, 33410.00),
labels = c(1, 2, 3, 4))
my_map$binned_CountySpendingPerStudent <- as.numeric(my_map$binned_CountySpendingPerStudent)
my_map$binned_science <- as.numeric(my_map$cleaned_rural_mean_sci)
my_map$binned_science <- cut(my_map$cleaned_rural_mean_sci,
breaks = c(19.01000, 20.13391, 20.64000, 21.16250, 22.63571),
labels = c(1, 2, 3, 4))
my_map$binned_science <- as.numeric(my_map$binned_science)
my_map$binned_math <- as.numeric(my_map$cleaned_rural_mean_math)
my_map$binned_math <- cut(my_map$cleaned_rural_mean_math,
breaks = c(19.66250, 21.33818, 21.68000, 22.08706, 23.12000),
labels = c(1, 2, 3, 4))
my_map$binned_math <- as.numeric(my_map$binned_math)
my_map$binned_grad <- as.numeric(my_map$cleaned_rural_CountyGraduateRate4yr)
my_map$binned_grad <- cut(my_map$cleaned_rural_CountyGraduateRate4yr,
breaks = c(81.9000, 91.1050, 94.0700, 96.0425, 100.0000),
labels = c(1, 2, 3, 4))
my_map$binned_grad <- as.numeric(my_map$binned_grad)
my_map$binned_grad5 <- as.numeric(my_map$cleaned_rural_CountyGraduateRate5yr)
my_map$binned_grad5 <- cut(my_map$cleaned_rural_CountyGraduateRate5yr,
breaks = c(88.08000, 93.45750, 95.26600, 97.39333, 100.0000),
labels = c(1, 2, 3, 4))
my_map$binned_grad5 <- as.numeric(my_map$binned_grad5)
my_map$binned_phd <- as.numeric(my_map$cleaned_rural_Graduate.or.professional.degree..)
my_map$binned_phd <- cut(my_map$cleaned_rural_Graduate.or.professional.degree..,
breaks = c(2.7, 4.0, 4.8, 5.9, 23.7),
labels = c(1, 2, 3, 4))
my_map$binned_phd <- as.numeric(my_map$binned_phd)
my_map$binned_ba <- as.numeric(my_map$cleaned_rural_Bachelor.s.degree..)
my_map$binned_ba <- cut(my_map$cleaned_rural_Bachelor.s.degree..,
breaks = c(7.40, 11.75, 13.50, 14.90, 32.10),
labels = c(1, 2, 3, 4))
my_map$binned_ba <- as.numeric(my_map$binned_ba)
# Palettes of interest
# palette = c("#a6bddb", "#3690c0", "#034e7b"),
# palette = c("#8c510a", "#d8b365", "#7fbf7b"),
# palette = c("#7b3294", "#c2a5cf", "#f7f7f7", "#a6dba0", "#008837")
# palette = c("#edf8fb", "#b3cde3", "#8c96c6", "#8856a7", "#810f7c")
# palette = c("#f6eff7", "#bdc9e1", "#67a9cf", "#1c9099", "#016c59")
# palette = c("#a6611a", "#dfc27d", "#f5f5f5", "#80cdc1", "#018571")
# palette = c("#edf8fb", "#b2e2e2", "#66c2a4", "#2ca25f", "#006d2c")
# Chunk 4
ui <- fluidPage(
navbarPage(
"Maps",
tabPanel("Science Scores",
tmapOutput("map_science")),
tabPanel("Math Scores",
tmapOutput("map_math"))
)
)
server <- function(input, output) {
output$map_science <- renderTmap({
tm_shape(my_map) +
tm_fill("cleaned_rural_mean_sci",
style = "quantile",
n = 5,
palette = c("#f6eff7", "#bdc9e1", "#67a9cf", "#1c9099", "#016c59"),
title = "Avg. ACT Science Score") +
tm_symbols(size = "binned_CountySpendingPerStudent",
col = "black",
alpha = .8,
scale = 1.75)
})
output$map_math <- renderTmap({
tm_shape(my_map) +
tm_fill("cleaned_rural_mean_math",
style = "quantile",
n = 5,
palette = c("#f6eff7", "#bdc9e1", "#67a9cf", "#1c9099", "#016c59"),
title = "Avg. ACT Math Score") +
tm_symbols(size = "binned_CountySpendingPerStudent",
col = "black",
alpha = .8,
scale = 1.75)
})
}
shinyApp(ui = ui, server = server)
